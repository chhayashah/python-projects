def all_unique(lst):
  return len(lst)==len(set(lst))

x=[1,1,2,2,3,2,3,4,5,6]
y=[1,2,3,4,5]
print(all_unique(x))
print(all_unique(y))

!pip install collections

from collections import Counter

def anagram(first,second):
  return Counter(first)==Counter(second)

  anagram("abcd3","3acdb")

import sys

variable=30
print(sys.getsizeof(variable))

def byte_size(string):
  return(len(string.encode('utf-8')))

print(byte_size('?'))

print(byte_size("hello world"))  

n=2;
s="Programming"

print(s*n);

s="programming is awesome"

print(s.title())

def chunk(list,size):
  return [list[i:i+size] for i in range(0,len(list),size)]

lstA=[1,2,3,4,5,6,7,8,9,10]
lstSize=3
chunk(lstA,lstSize)

def compact(lst):
  return list(filter(bool,lst))

compact([0,1,False,2,'','',3,'a','s',34])

array=[['a','b'],['c','d'],['e','f']]
transposed = zip(*array)
[print(i) for i in transposed]

a=3
print(2<a<a)
print(1==a<2)

hobbies=["singing","soccer","swimming"]

print("my hobbies are:")
print(",".join(hobbies))

!pip install regex

import re

def count_vowels(value):
  return len(re.findall(r'[aeiou]',value,re.IGNORECASE))

print(count_vowels('foobar'))
print(count_vowels('gym'))

newList=[1,2]
newList.extend([3,5])
newList.append(7)
print(newList)

def spread(arg):
  ret=[]
  for i in arg:
      if isinstance(i,list):
          ret.extend(i)
      else:
          ret.append(i)
  return ret


def deep_flatten(xs):
  flat_list=[]
  [flat_list.extend(deep_flatten(x)) for x in xs] if isinstance(xs,list) else flat_list.append(xs)
  return flat_list

deep_flatten([1,[2],[[3],4],5])

def difference(a,b):
  set_a=set(a)
  set_b=set(b)
  comparison=set_a.difference(set_b)
  return list(comparison)

difference([1,2,3],[1,2,4])

def difference_by(a,b,fn):
  b=set(map(fn,b))
  return [item for item in a if fn(item) not in b]

from math import floor
print(difference_by([2.1,1.5,1.9,2.3],[2.2,3.1,3.9,4.5],floor))
print(difference_by([{'x':2},{'x':1}],[{'x':1}],lambda v:v['x']))

def add(a,b):
  return a+b

def subtract(a,b):
  return a-b

a,b=4,5
print((subtract if a>b else add)(a,b))

def has_duplicates(lst):
  return len(lst) != len(set(lst))

x=[1,2,3,4,5,5]
y=[1,2,3,4,5]
print(has_duplicates(x))
print(has_duplicates(y))

def merge_dictionaries(a,b):
  return {**a,**b}

a={'x':1,'y':2}
b={'y':3,'z':4}
print(merge_dictionaries(a,b))

def to_dictionary(keys,values):
  return dict(zip(keys,values))

keys=["a","b","c"]
values=[2,3,4]
print(to_dictionary(keys,values))

keys=["a","b","c"]
values=[2,3]
print(to_dictionary(keys,values)) 

list=["a","b","c","d"]
for index,element in enumerate(list):
  print("Value",element,"Index",index,)

import time

start_time=time.time()

a=1
b=2
c=a+b
print(c)
end_time=time.time()
total_time=end_time-start_time
print("Time: ",total_time)

try:
  2*3
except Exception:
  print("Exception occured")
else:
  print("There were no exception")

  try:
  2/10
except Exception:
  print("Exception occured")
else:
  print("There were no exception")

def most_frequent(list):
  return max(set(list),key=list.count)

numbers=[1,2,1,2,3,2,1,4,2]
most_frequent(numbers)

def palindrome(a):
  print(a[::-1])
  return a==a[::-1]

palindrome('mom')

import operator
action = {
    "+":operator.add,
    "-":operator.sub,
    "/":operator.truediv,
    "*":operator.mul,
    "**":pow
}

print(action["-"](50,25))

from random import shuffle

foo=[1,2,3,4]
shuffle(foo)
print(foo)

def swap(a,b):
  return b,a

a,b=-1,14
swap(a,b)

d={'a':1,'b':2}

print(d.get('c',3))
print(d)
  
